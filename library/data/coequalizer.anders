{- Coequalizer.

   HoTT 6.8 Pushouts
   HoTT 6.10 Quotients
   HoTT 6.7 Hubs and Spokes
   HoTT 6.9 Truncations

   [1]. Nicolai Kraus, Jakob von Raumer.
   Path spaces of higher inductive types in homotopy type theory.
   http://pure-oai.bham.ac.uk/ws/files/84880431/Path_Spaces.pdf

   [2]. Bauer, Gross, Lumsdaine, Shulman, Sozeau, Spitters [HoTT/Coq]
   The HoTT Library: A formalization of homotopy type theory in Coq
   https://arxiv.org/pdf/1610.04591.pdf

   [3]. Andrej Bauer, Niels van der Weide 
   The Three-HITs Theorem
   https://github.com/nmvdw/Three-HITs

   Copyright © Groupoid Infinity, 2021—2022,
             © @siegment, 2022 -}

import library/data/equiv
import library/data/W-type

{- Coequalizer Primitive -}

def coeq′ (A B : U) (f g : A → B) : U := coeq f g
def iota′ (A B : U) (f g : A → B) (x : B) : coeq f g := iota f g x
def resp′ (A B : U) (f g : A → B) (x : A) : Path (coeq f g) (iota f g (f x)) (iota f g (g x)) :=
<i> resp f g x i

section
  variables (A B : U) (f g : A → B) (X : coeq f g → U) (i : Π (b : B), X (iota f g b))
            (ρ : Π (x : A), PathP (<i> X (resp f g x i)) (i (f x)) (i (g x)))

  def coeq-ind′ : Π (w : coeq f g), X w :=
  coeq-ind X i (λ (x : A) (i : I), ρ x @ i)

  def coeq-ind-β₁ (b : B) : Path (X (iota f g b)) (coeq-ind′ A B f g X i ρ (iota f g b)) (i b) :=
  <_> i b

  def coeq-ind-β₂ (x : A) : Path (PathP (<j> X (resp f g x j)) (i (f x)) (i (g x)))
                                 (<j> coeq-ind′ A B f g X i ρ (resp f g x j)) (ρ x) :=
  <_> ρ x

  def coeq-ind-hcomp (r : I) (u : I → Partial (coeq f g) r) (u₀ : (coeq f g)[r ↦ u 0]) :=
  comp (λ (i : I), X (hfill (coeq f g) r u u₀ i)) r
    (λ (j : I), [(r = 1) → coeq-ind′ A B f g X i ρ (u j 1=1)])
    (inc (X (ouc u₀)) r (coeq-ind′ A B f g X i ρ (ouc u₀)))

  def coeq-ind-hcomp′ (r : I) (u : I → Partial (coeq f g) r) (u₀ : (coeq f g)[r ↦ u 0]) :=
  coeq-ind′ A B f g X i ρ (hcomp (coeq f g) r u (ouc u₀))
end

section
  variables (A B : I → U) (f g : Π (i : I), A i → B i)

  def trans-coeq-iota (x : B 0) : coeq (f 1) (g 1) :=
  iota (f 1) (g 1) (transp (<i> B i) 0 x)

  def trans-coeq-iota′ (x : B 0) : coeq (f 1) (g 1) :=
  transp (<i> coeq (f i) (g i)) 0 (iota (f 0) (g 0) x)

  def trans-coeq-iota-is-correct (x : B 0) :
    Path (coeq (f 1) (g 1)) (trans-coeq-iota A B f g x) (trans-coeq-iota′ A B f g x) :=
  <_> trans-coeq-iota A B f g x

  def trans-coeq-resp (x : A 0) (φ : I) : coeq (f 1) (g 1) :=
  hcomp (coeq (f 1) (g 1)) (∂ φ)
    (λ (j : I), [(φ = 0) → iota (f 1) (g 1) (transp (<k> B (-j ∨ k)) -j
                                (f -j (transp (<k> A (k ∧ -j)) j x))),
                 (φ = 1) → iota (f 1) (g 1) (transp (<k> B (-j ∨ k)) -j
                                (g -j (transp (<k> A (k ∧ -j)) j x)))])
    (resp (f 1) (g 1) (transp (<i> A i) 0 x) φ)

  def trans-coeq-resp′ (x : A 0) (φ : I) : coeq (f 1) (g 1) :=
  transp (<i> coeq (f i) (g i)) 0 (resp (f 0) (g 0) x φ)
end

section
  variables (A B : U) (f g : A → B) (r : I) (u : I → Partial B r) (u₀ : B[r ↦ u 0])

  def hcomp-coeq-iota : coeq f g :=
  iota f g (hcomp B r u (ouc u₀))

  def hcomp-coeq-iota′ : coeq f g :=
  hcomp (coeq f g) r (λ (i : I), [(r = 1) → iota f g (u i 1=1)]) (iota f g (ouc u₀))
end
