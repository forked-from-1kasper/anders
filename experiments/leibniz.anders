module leibniz where
import experiments/3-mult
option girard true

def eq (A : U) (x y : A) : U := Π (P : A -> U), P x -> P y
def refl (A : U) (x : A) : eq A x x := λ (P : A -> U) (u : P x), u
def five-plus-four : eq N (plus N5 N4) N9 := refl N N9
def subst (A : U) (P : A -> U) (a b : A) (p : eq A a b) : P a -> P b := p P
def ap (A B : U) (f : A -> B) (a b : A) (p : eq A a b) : eq B (f a) (f b) := subst A (λ (b : A), eq B (f a) (f b)) a b p (refl B (f a))
def D (A : U) : U := Π (x y : A), eq A x y -> U
def singl (A : U) (a : A) : U := Σ (x : A), eq A a x
def eta (A : U) (a : A) : singl A a := (a, refl A a)

theorem η-Π (A : U) (B : A -> U) (f : Π (x : A), B x) : eq (Π (x : A), B x) f (λ (x : A), f x)
     := refl (Π (x : A), B x) f

theorem η-Σ (A : U) (B : A -> U) (w : Σ (x : A), B x) : eq (Σ (x : A), B x) w (w.1, w.2)
     := refl (Σ (x : A), B x) w
