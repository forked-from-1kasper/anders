{- The modality of shape infinitesimal in cohesive infinity topos.
   - \Im modality type.

   HoTT 7.7 Modalities
   Felix Wellen PhD

   https://arxiv.org/pdf/1806.05966.pdf

   Copyright (c) Groupoid Infinity, 2014-2022. -}

module infinitesimal where
import library/path
import library/iso

{- de Rham Stack -}

def Œπ (A : U) (a : A) : ‚Ñë A := ‚Ñë-unit a
def Œº (A : U) (a : ‚Ñë (‚Ñë A)) := ‚Ñë-join a

def isCoreduced (A : U) : U := isEquiv A (‚Ñë A) (Œπ A)
def ‚Ñë-coreduced (A : U) : isCoreduced (‚Ñë A) := isoToEquiv (‚Ñë A) (‚Ñë (‚Ñë A)) (Œπ (‚Ñë A)) (Œº A) (Œª (x : ‚Ñë (‚Ñë A)), <_> x) (Œª (y : ‚Ñë A), <_> y)
def ind-‚ÑëŒ≤ (A : U) (B : ‚Ñë A -> U) (f : Œ† (a : A), ‚Ñë (B (Œπ A a))) (a : A) : Path (‚Ñë (B (Œπ A a))) (ind-‚Ñë A B f (Œπ A a)) (f a) := <_> f a

def trans-‚Ñë (A : I ‚Üí U) (a : A 0) : ‚Ñë (A 1) := ‚Ñë-unit (transp (<i> A i) 0 a)
def trans-‚Ñë‚Ä≤ (A : I ‚Üí U) (a : A 0) : ‚Ñë (A 1) := transp (<i> ‚Ñë (A i)) 0 (‚Ñë-unit a)
def trans-‚Ñë-is-correct (A : I ‚Üí U) (a : A 0) : Path (‚Ñë (A 1)) (trans-‚Ñë A a) (trans-‚Ñë‚Ä≤ A a) := <_> trans-‚Ñë A a

def ‚Ñë-ind (A : U) (B : ‚Ñë A -> U) (c : Œ† (a : ‚Ñë A), isCoreduced (B a)) (f : Œ† (a : A), B (Œπ A a)) (a : ‚Ñë A) : B a
 := (c a (ind-‚Ñë A B (Œª (x : A), Œπ (B (Œπ A x)) (f x)) a)).1.1

def ‚Ñë-indŒ≤ (A : U) (B : ‚Ñë A -> U) (c : Œ† (a : ‚Ñë A), isCoreduced (B a)) (f : Œ† (a : A), B (Œπ A a)) (a : A)
  : Path (B (Œπ A a)) (f a) ((‚Ñë-ind A B c f) (Œπ A a))
 := <i> sec-equiv (B (Œπ A a)) (‚Ñë (B (Œπ A a))) (Œπ (B (Œπ A a)), c (Œπ A a)) (f a) @ -i

def ‚Ñë-rec (A B : U) (c : isCoreduced B) (f : A -> B) : ‚Ñë A -> B
 := ‚Ñë-ind A (Œª (_ : ‚Ñë A), B) (Œª (_ : ‚Ñë A), c) f

def ‚Ñë-recŒ≤ (A B : U) (c : isCoreduced B) (f : A -> B) (a : A) : PathP (<_> B) (f a) ((‚Ñë-rec A B c f) (Œπ A a))
 := ‚Ñë-indŒ≤ A (Œª (_ : ‚Ñë A), B) (Œª (_ : ‚Ñë A), c) f a

def ‚Ñë-app (A B : U) (f : A -> B) : ‚Ñë A -> ‚Ñë B := ‚Ñë-rec A (‚Ñë B) (‚Ñë-coreduced B) (‚àò A B (‚Ñë B) (Œπ B) f)
def ‚Ñë-naturality (A B : U) (f : A -> B) (a : A) : Path (‚Ñë B) ((Œπ B) (f a)) ((‚Ñë-app A B f) (Œπ A a))
 := <_> ‚Ñë-unit (f a) -- slightly surprisingly, but it computes

def ~ (X : U) (a x' : X) : U := Path (‚Ñë X) (Œπ X a) (Œπ X x')
def ùîª (X : U) (a : X) : U := Œ£ (x' : X), ~ X a x'
def unitDisc (X : U) (x : ‚Ñë X) : U := Œ£ (x' : X), Path (‚Ñë X) x (Œπ X x')
def starDisc (X : U) (x : X) : ùîª X x := (x, idp (‚Ñë X) (Œπ X x))
def formalDiscBundle (A : U) : U := Œ£ (a : A), ùîª A a

def preservesInifinitesimalProximity (X Y : U) (x x' : X) (f : X -> Y) (p : ~ X x x') : ~ Y (f x) (f x') :=
<i> ‚Ñë-app X Y f (p @ i)

def d (X Y : U) (f : X -> Y) (x : X) (Œµ : ùîª X x) : ùîª Y (f x)
 := (f Œµ.1, preservesInifinitesimalProximity X Y x Œµ.1 f Œµ.2)

axiom lemma45 (A B C : U) (f : A -> B) (g : B -> C) (x : A)
  : Path ((ùîª A x -> ùîª C ((‚àò A B C g f) x)))
         (d A C (‚àò A B C g f) x)
         (‚àò (ùîª A x) (ùîª B (f x)) (ùîª C ((‚àò A B C g f) x)) (d B C g (f x)) (d A B f x))
