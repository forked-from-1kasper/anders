{- MLTT Reality Check:
   - Empty, Pi, Sigma, Equ, W.
   Copyright (c) Groupoid Infinity, 2014-2021. -}

module mltt where
option girard true
option pre-eval true

-- types U

def Pi (A: U) (B: A → U): U ≔ Π (x: A), B x
def lambda (A: U) (B:A → U) (b: Pi A B): Pi A B ≔ λ (x: A), b x
def app (A: U) (B: A → U) (f: Pi A B) (a: A): B a ≔ f a

def Sigma (A: U) (B: A → U) : U ≔ Σ (x: A), B x
def pair (A: U) (B: A → U) (a: A) (b: B a) : Sigma A B ≔ (a, b)
def pr₁ (A: U) (B: A → U) (x: Sigma A B) : A ≔ x.1
def pr₂ (A: U) (B: A → U) (x: Sigma A B) : B (pr₁ A B x) ≔ x.2

-- pretypes V

def Equ (A : U) (x y : A) : U := PathP (<_> A) x y
def refl (A : U) (x : A) : Equ A x x := <_> x
def D (A : U) : U₁ ≔ Π (x y : A), Equ A x y → U
def singl (A : U) (a : A) : U ≔ Σ (x: A), Equ A a x
def eta (A : U) (a : A) : singl A a ≔ (a, refl A a)
def trans (A B: U) (p: Equ U A B) (a: A): B := transp p 0 a
def subst (A: U) (P: A -> U) (a b: A) (p: Equ A a b) (e: P a): P b := transp (<i> P (p @ i)) 0 e
def trans_comp (A:U)(a: A): Equ A a (trans A A (<i> A) a) := <j> transp (<_> A) -j a
def contr (A : U) (a b : A) (p : Equ A a b) : Equ (singl A a) (eta A a) (b, p) := <i> (p @ i, <j> p @ i /\ j)
def subst_comp (A: U) (P: A → U) (a: A) (e: P a): Equ (P a) e (subst A P a a (refl A a) e) ≔ trans_comp (P a) e
def J (A: U) (x: A) (C: D A) (d: C x x (refl A x)) (y: A) (p: Equ A x y): C x y p ≔
    subst (singl A x) (\ (z: singl A x), C x (z.1) (z.2)) (eta A x) (y, p) (contr A x y p) d

definition comp₁ (A : U) (B : A → U) (a : A) (f : Pi A B) : Equ (B a) (app A B (lambda A B f) a) (f a) ≔ refl (B a) (f a)
definition comp₂ (A : U) (B : A → U) (a : A) (f : Pi A B) : Equ (Pi A B) f (λ (x : A), f x) ≔ refl (Pi A B) f
definition comp₃ (A : U) (B : A → U) (a : A) (b : B a) : Equ A a (pr₁ A B (a ,b)) ≔ refl A a
definition comp₄ (A : U) (B : A → U) (a : A) (b : B a) : Equ (B a) b (pr₂ A B (a, b)) ≔ refl (B a) b
definition comp₅ (A : U) (B : A → U) (p : Sigma A B) : Equ (Sigma A B) p (pr₁ A B p, pr₂ A B p) ≔ refl (Sigma A B) p
definition comp₆ (A : U) (a : A) (C : D A) (d: C a a (refl A a)) : Equ (C a a (refl A a)) d (J A a C d a (refl A a))
  ≔ subst_comp (singl A a) (\ (z: singl A a), C a (z.1) (z.2)) (eta A a) d

def MLTT (A : U) : U ≔ Σ
  (Π-form  : Π (B : A → U), U)
  (Π-ctor₁ : Π (B : A → U), Pi A B → Pi A B)
  (Π-elim₁ : Π (B : A → U), Pi A B → Pi A B)
  (Π-comp₁ : Π (B : A → U) (a : A) (f : Pi A B), Equ (B a) (Π-elim₁ B (Π-ctor₁ B f) a) (f a))
  (Π-comp₂ : Π (B : A → U) (a : A) (f : Pi A B), Equ (Pi A B) f (λ (x : A), f x))
  (Σ-form  : Π (B : A → U), U)
  (Σ-ctor₁ : Π (B : A → U) (a : A) (b : B a) , Sigma A B)
  (Σ-elim₁ : Π (B : A → U) (p : Sigma A B), A)
  (Σ-elim₂ : Π (B : A → U) (p : Sigma A B), B (pr₁ A B p))
  (Σ-comp₁ : Π (B : A → U) (a : A) (b: B a), Equ A a (Σ-elim₁ B (Σ-ctor₁ B a b)))
  (Σ-comp₂ : Π (B : A → U) (a : A) (b: B a), Equ (B a) b (Σ-elim₂ B (a, b)))
  (Σ-comp₃ : Π (B : A → U) (p : Sigma A B), Equ (Sigma A B) p (pr₁ A B p, pr₂ A B p))
  (=-form  : Π (a : A), A → U)
  (=-ctor₁ : Π (a : A), Equ A a a)
  (=-elim₁ : Π (a : A) (C: D A) (d: C a a (=-ctor₁ a)) (y: A) (p: Equ A a y), C a y p)
  (=-comp₁ : Π (a : A) (C: D A) (d: C a a (=-ctor₁ a)), Equ (C a a (=-ctor₁ a)) d (=-elim₁ a C d a (=-ctor₁ a))),
  U

-- Theorem. β-rule for pretypes is derivable with generalized transport

theorem internalizing (A : U) : MLTT A ≔
  (Pi A, lambda A, app A, comp₁ A, comp₂ A,
   Sigma A, pair A, pr₁ A, pr₂ A, comp₃ A, comp₄ A, comp₅ A,
   Equ A, refl A, J A, comp₆ A, A)
