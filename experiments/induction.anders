module induction where

def indᵂ-β (A : U) (B : A → U) (C : (W (x : A), B x) → U)
    (g : Π (x : A) (f : B x → (W (x : A), B x)),
    (Π (b : B x), C (f b)) → C (sup A B x f))
    (a : A) (f : B a → (W (x : A), B x))
 := g a f (λ (b : B a), indᵂ A B C g (f b))

def indᵂ-β′ (A : U) (B : A → U) (C : (W (x : A), B x) → U)
    (g : Π (x : A) (f : B x → (W (x : A), B x)),
    (Π (b : B x), C (f b)) → C (sup A B x f))
    (a : A) (f : B a → (W (x : A), B x))
 := indᵂ A B C g (sup A B a f)

def ℕ := W (x : 𝟐), ind₂ (λ (_ : 𝟐), U) 𝟎 𝟏 x
def ℕ-ctor := ind₂ (λ (_ : 𝟐), U) 𝟎 𝟏

def zero : ℕ := sup 𝟐 ℕ-ctor 0₂ (ind₀ ℕ)
def succ (n : ℕ) : ℕ := sup 𝟐 ℕ-ctor 1₂ (λ (x : 𝟏), n)

def Sum (A B: U) : U := Σ (x: bool), ind₂ (\(_ : bool), U) A B x
def inl (A B: U) (a: A) : Sum A B := (0₂, a)
def inr (A B: U) (b: B) : Sum A B := (1₂, b)

def Option (A : U) : U := Σ (x: bool), ind₂ (\(_ : bool), U) unit A x
def none (A : U) : Option A := (0₂, star)
def some (A : U) (a: A) : Option A := (1₂, a)
