{- Category Theory.
   - Precategories.
   - Rezk Completion.
   - Initial and Terminal Objects.

   HoTT 9.1 Categories and precategories
   HoTT 9.9 The Rezk completion

   Copyright (c) Groupoid Infinity, 2014-2021. -}

module cat where
import experiments/path

def cat : U₁ := Σ (A: U), A -> A -> U
def isPrecategory (C: cat) : U := Σ
    (id: Π (x: C.1), C.2 x x)
    (∘: Π (x y z:C.1), C.2 x y -> C.2 y z -> C.2 x z)
    (homSet: Π (x y: C.1), isSet (C.2 x y))
    (∘-left: Π (x y: C.1) (f: C.2 x y), Path (C.2 x y) (∘ x x y (id x) f) f)
    (∘-right: Π (x y: C.1) (f: C.2 x y), Path (C.2 x y) (∘ x y y f (id y)) f),
    Π (x y z w: C.1) (f: C.2 x y) (g: C.2 y z) (h: C.2 z w),
    Path (C.2 x w) (∘ x z w (∘ x y z f g) h) (∘ x y w f (∘ y z w g h))

def precategory: U₁ := Σ (C: cat), isPrecategory C
def carrier (C: precategory): U := C.1.1
def hom (C: precategory) (a b: carrier C): U := C.1.2 a b
def homSet (C: precategory) (a b: carrier C): isSet (hom C a b) := C.2.2.2.1 a b
def compose (C: precategory) (x y z: carrier C) (f: hom C x y) (g: hom C y z): hom C x z := C.2.2.1 x y z f g
def path (C: precategory) (x: carrier C): hom C x x := C.2.1 x
def pathL (C: precategory) (x y: carrier C) (f: hom C x y): Path (hom C x y) (compose C x x y (path C x) f) f := C.2.2.2.2.1 x y f
def pathR (C: precategory) (x y: carrier C) (f: hom C x y): Path (hom C x y) (compose C x y y f (path C y)) f := C.2.2.2.2.2.1 x y f
def pathC (C: precategory) (x y z w: carrier C) (f: hom C x y) (g: hom C y z) (h: hom C z w)
  : Path (hom C x w) (compose C x z w (compose C x y z f g) h) (compose C x y w f (compose C y z w g h)) := C.2.2.2.2.2.2 x y z w f g h

def catᵒᵖ (P: precategory) : precategory :=
    ((carrier P, λ (A B: carrier P), hom P B A),
    λ (A: carrier P), path P A,
    λ (A B C: carrier P) (f: hom P B A) (g: hom P C B), compose P C B A g f,
    λ (A B: carrier P), homSet P B A,
    λ (A B: carrier P) (f: hom P B A), pathR P B A f,
    λ (A B: carrier P) (f: hom P B A), pathL P B A f,
    λ (A B C D: carrier P) (f: hom P B A) (g: hom P C B) (h: hom P D C), <i> (pathC P D C B A h g f) @ -i)

def opPreserve (C: precategory) : PathP (<_>precategory) (catᵒᵖ (catᵒᵖ C)) C := <i> C

def iso (C: precategory) (A B: carrier C) : U {-₁-} := Σ (f: hom C A B) (g: hom C B A)
    (section: Path (hom C A A) (compose C A B A f g) (path C A)), Path (hom C B B) (compose C B A B g f) (path C B)

def isCategory (C: precategory): U := Σ (A: carrier C), isContr (Π (B: carrier C), iso C A B)
def category: U₁ := Σ (C: precategory), isCategory C
def isInitial (C: precategory) (bot: carrier C): U := Π (x: carrier C), isContr (hom C bot x)
def isTerminal (C: precategory) (top: carrier C): U := Π (x: carrier C), isContr (hom C x top)
def initial (C: precategory): U := Σ (bot: carrier C), isInitial C bot
def terminal (C: precategory): U := Σ (top: carrier C), isTerminal C top

def homTo  (C: precategory) (X: carrier C): U := Σ (Y: carrier C), hom C Y X
def cospan (C: precategory): U := Σ (X: carrier C) (_: homTo C X), homTo C X

def hasCospanCone (C: precategory) (D: cospan C) (W: carrier C) : U := Σ (f: hom C W D.2.1.1) (g: hom C W D.2.2.1),
    Path (hom C W D.1) (compose C W D.2.1.1 D.1 f D.2.1.2) (compose C W D.2.2.1 D.1 g D.2.2.2)

def cospanCone (C: precategory) (D: cospan C): U := Σ (W: carrier C), hasCospanCone C D W
def isCospanConeHom (C: precategory) (D: cospan C) (E1 E2: cospanCone C D) (h: hom C E1.1 E2.1) : U := Σ
    (_ : Path (hom C E1.1 D.2.1.1) (compose C E1.1 E2.1 D.2.1.1 h E2.2.1) E1.2.1),
    Path (hom C E1.1 D.2.2.1) (compose C E1.1 E2.1 D.2.2.1 h E2.2.2.1) E1.2.2.1

def cospanConeHom (C: precategory) (D: cospan C) (E1 E2: cospanCone C D) : U := Σ (h: hom C E1.1 E2.1), isCospanConeHom C D E1 E2 h
def isPullback (C: precategory) (D: cospan C) (E: cospanCone C D) : U := Σ (h: cospanCone C D), isContr (cospanConeHom C D h E)
def hasPullback (C: precategory) (D: cospan C) : U := Σ (E: cospanCone C D), isPullback C D E

def isCatGroupoid (C: cat): U := Σ
    (id: Π (x: C.1), C.2 x x)
    (c: Π (x y z:C.1), C.2 x y -> C.2 y z -> C.2 x z)
    (HomGrpd: Π (x y: C.1), isGroupoid (C.2 x y))
    (inv: Π (x y: C.1), C.2 x y -> C.2 y x)
    (inv_left: Π (x y: C.1) (p: C.2 x y), Path (C.2 x x) (c x y x p (inv x y p)) (id x))
    (inv_right: Π (x y: C.1) (p: C.2 x y), Path (C.2 y y) (c y x y (inv x y p) p) (id y))
    (left: Π (x y: C.1) (f: C.2 x y), Path (C.2 x y) (c x x y (id x) f) f)
    (right: Π (x y: C.1) (f: C.2 x y), Path (C.2 x y) (c x y y f (id y)) f),
    Π (x y z w: C.1) (f: C.2 x y) (g: C.2 y z) (h: C.2 z w),
    Path (C.2 x w) (c x z w (c x y z f g) h) (c x y w f (c y z w g h))
