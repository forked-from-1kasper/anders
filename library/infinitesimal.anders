{- The modality of shape infinitesimal in cohesive infinity topos.
   - \Im modality type.

   HoTT 7.7 Modalities
   Felix Wellen PhD

   https://arxiv.org/pdf/1806.05966.pdf

   Copyright (c) Groupoid Infinity, 2014-2022. -}

module infinitesimal where
import library/path
import library/equiv

-- de Rham Stack
def ι (A : U) (a : A) : ℑ A := ℑ-unit a

def isCoreduced (A : U) : U := isEquiv A (ℑ A) (ι A)
axiom ImCoreduced (A : U) : isCoreduced (ℑ A)

axiom ind-ℑβ (A : U) (B : ℑ A -> U) (f : Π (a : A), ℑ (B (ι A a))) (a : A) :
  Path (ℑ (B (ι A a))) (ind-ℑ A B f (ι A a)) (f a)

def ImInduction (A : U) (B : ℑ A -> U) (H : Π (a : ℑ A), isCoreduced (B a))
  (f : Π (a : A), B (ι A a)) (a : ℑ A) : B a :=
(H a (ind-ℑ A B (λ (x : A), ι (B (ι A x)) (f x)) a)).1.1

axiom ImComputeInduction (A : U) (B : ℑ A -> U) (c : Π (a : ℑ A), isCoreduced (B a))
  (f : Π (a : A), B (ι A a)) (a : A) : Path (B (ι A a)) (f a) ((ImInduction A B c f) (ι A a))

def ImRecursion (A B : U) (c : isCoreduced B) (f : A -> B) : ℑ A -> B
 := ImInduction A (λ (_ : ℑ A), B) (λ (_ : ℑ A), c) f

def ImComputeRecursion (A B : U) (c : isCoreduced B) (f : A -> B) (a : A) : PathP (<_> B) (f a) ((ImRecursion A B c f) (ι A a))
 := ImComputeInduction A (λ (_ : ℑ A), B) (λ (_ : ℑ A), c) f a

def ImApp (A B : U) (f : A -> B) : ℑ A -> ℑ B := ImRecursion A (ℑ B) (ImCoreduced B) (∘ A B (ℑ B) (ι B) f)
def ImNaturality (A B : U) (f : A -> B) : Π (a : A), Path (ℑ B) ((ι B) (f a)) ((ImApp A B f) (ι A a))
 := ImComputeRecursion A (ℑ B) (ImCoreduced B) (∘ A B (ℑ B) (ι B) f)

def ~ (X : U) (a x' : X) : U := Path (ℑ X) (ι X a) (ι X x')
def 𝔻 (X : U) (a : X) : U := Σ (x' : X), ~ X a x'
def unitDisc (X : U) (x : ℑ X) : U := Σ (x' : X), Path (ℑ X) x (ι X x')
def starDisc (X : U) (x : X) : 𝔻 X x := (x, idp (ℑ X) (ι X x))
def formalDiscBundle (A : U) : U := Σ (a : A), 𝔻 A a

def preservesInifinitesimalProximity (X Y : U) (x x' : X) (f : X -> Y) (p : ~ X x x') : ~ Y (f x) (f x') :=
<i> hcomp (ℑ Y) (∂ i) (λ (j : I), [(i = 0) → ImNaturality X Y f x @ -j, (i = 1) → ImNaturality X Y f x' @ -j]) (ImApp X Y f (p @ i))

def d (X Y : U) (f : X -> Y) (x : X) (ε : 𝔻 X x) : 𝔻 Y (f x)
 := (f ε.1, preservesInifinitesimalProximity X Y x ε.1 f ε.2)

axiom lemma45 (A B C : U) (f : A -> B) (g : B -> C) (x : A)
  : Path ((𝔻 A x -> 𝔻 C ((∘ A B C g f) x)))
         (d A C (∘ A B C g f) x)
         (∘ (𝔻 A x) (𝔻 B (f x)) (𝔻 C ((∘ A B C g f) x)) (d B C g (f x)) (d A B f x))
