{- Category Theory.
   - Precategories.
   - Rezk Completion.
   - Initial and Terminal Objects.

   HoTT 9.1 Categories and precategories
   HoTT 9.9 The Rezk completion

   Copyright (c) Groupoid Infinity, 2014-2022. -}

module cat where
import library/path

def cat : U₁ := Σ (ob: U) (hom: ob -> ob -> U), unit

def isPrecategory (C: cat) : U := Σ
    (id: Π (x: C.ob), C.hom x x)
    (∘: Π (x y z:C.ob), C.hom x y -> C.hom y z -> C.hom x z)
    (homSet: Π (x y: C.ob), isSet (C.hom x y))
    (∘-left: Π (x y: C.ob) (f: C.hom x y), Path (C.hom x y) (∘ x x y (id x) f) f)
    (∘-right: Π (x y: C.ob) (f: C.hom x y), Path (C.hom x y) (∘ x y y f (id y)) f)
    (∘-assoc: Π (x y z w: C.ob) (f: C.hom x y) (g: C.hom y z) (h: C.hom z w),
       Path (C.hom x w) (∘ x z w (∘ x y z f g) h) (∘ x y w f (∘ y z w g h))), unit

def precategory: U₁ := Σ (C: cat) (P: isPrecategory C), unit

def catᵒᵖ (P: precategory) : precategory :=
    ((P.C.ob, (λ (A B: P.C.ob), P.C.hom B A), P.C.2.2),
     ((λ (A : P.C.ob), P.P.id A),
      (λ (A B C: P.C.ob) (f: P.C.hom B A) (g: P.C.hom C B), P.P.∘ C B A g f),
      (λ (A B: P.C.ob), P.P.homSet B A),
      (λ (A B: P.C.ob) (f: P.C.hom B A), P.P.∘-right B A f),
      (λ (A B: P.C.ob) (f: P.C.hom B A), P.P.∘-left B A f),
      (λ (A B C D: P.C.ob) (f: P.C.hom B A) (g: P.C.hom C B) (h: P.C.hom D C), <i> (P.P.∘-assoc D C B A h g f) @ -i), P.P.2.2.2.2.2.2), P.2.2)

def opPreserve (C: precategory) : PathP (<_>precategory) (catᵒᵖ (catᵒᵖ C)) C := <i> C

def iso (P: precategory) (A B: P.C.ob) : U := Σ
    (f: P.C.hom A B)
    (g: P.C.hom B A)
    (retract: Path (P.C.hom A A) (P.P.∘ A B A f g) (P.P.id A))
    (section: Path (P.C.hom B B) (P.P.∘ B A B g f) (P.P.id B)), unit

def isCategory (P: precategory): U := Σ (A: P.C.ob), isContr (Π (B: P.C.ob), iso P A B)
def category: U₁ := Σ (P: precategory), isCategory P
def isInitial (P: precategory) (bot: P.C.ob): U := Π (x: P.C.ob), isContr (P.C.hom bot x)
def isTerminal (P: precategory) (top: P.C.ob): U := Π (x: P.C.ob), isContr (P.C.hom x top)
def initial (P: precategory): U := Σ (bot: P.C.ob), isInitial P bot
def terminal (P: precategory): U := Σ (top: P.C.ob), isTerminal P top

def homTo  (P: precategory) (X: P.C.ob): U := Σ (Y: P.C.ob), P.C.hom Y X
def cospan (P: precategory): U := Σ (X: P.C.ob) (_: homTo P X), homTo P X
def hasCospanCone (P: precategory) (D: cospan P) (w: P.C.ob) : U := Σ (f: P.C.hom w D.2.1.1) (g: P.C.hom w D.2.2.1),
    Path (P.C.hom w D.1) (P.P.∘ w D.2.1.1 D.1 f D.2.1.2) (P.P.∘ w D.2.2.1 D.1 g D.2.2.2)
def cospanCone (P: precategory) (D: cospan P): U := Σ (w: P.C.ob), hasCospanCone P D w
def isCospanConeHom (P: precategory) (D: cospan P) (E1 E2: cospanCone P D) (h: P.C.hom E1.1 E2.1) : U := Σ
    (_ : Path (P.C.hom E1.1 D.2.1.1) (P.P.∘ E1.1 E2.1 D.2.1.1 h E2.2.1) E1.2.1),
    Path (P.C.hom E1.1 D.2.2.1) (P.P.∘ E1.1 E2.1 D.2.2.1 h E2.2.2.1) E1.2.2.1
def cospanConeHom (P: precategory) (D: cospan P) (E1 E2: cospanCone P D) : U := Σ (h: P.C.hom E1.1 E2.1), isCospanConeHom P D E1 E2 h
def isPullback (P: precategory) (D: cospan P) (E: cospanCone P D) : U := Σ (h: cospanCone P D), isContr (cospanConeHom P D h E)
def hasPullback (P: precategory) (D: cospan P) : U := Σ (E: cospanCone P D), isPullback P D E

def PathCat (X: U): cat := (X, \ (x y : X), PathP (<_>X) x y, star)

def isCatGroupoid (C: cat): U := Σ
    (id: Π (x: C.ob), C.hom x x)
    (c: Π (x y z:C.ob), C.hom x y -> C.hom y z -> C.hom x z)
    (HomSet: Π (x y: C.ob), isSet (C.hom x y))
    (inv: Π (x y: C.ob), C.hom x y -> C.hom y x)
    (inv_left: Π (x y: C.ob) (p: C.hom x y), Path (C.hom x x) (c x y x p (inv x y p)) (id x))
    (inv_right: Π (x y: C.ob) (p: C.hom x y), Path (C.hom y y) (c y x y (inv x y p) p) (id y))
    (left: Π (x y: C.ob) (f: C.hom x y), Path (C.hom x y) f (c x x y (id x) f))
    (right: Π (x y: C.ob) (f: C.hom x y), Path (C.hom x y) f (c x y y f (id y))),
    Π (x y z w: C.ob) (f: C.hom x y) (g: C.hom y z) (h: C.hom z w),
    Path (C.hom x w) (c x z w (c x y z f g) h) (c x y w f (c y z w g h))

def CatGroupoid (X : U) : isCatGroupoid (PathCat X)
 := ( \(x:X), <_>x,
      comp-Path X,
      ?,
      sym X,
      comp-inv-Path⁻¹ X,
      comp-inv-Path X,
      comp-Path-left X,
      comp-Path-right X,
      comp-Path-assoc X
    )
