{- Path Type:
   — Path Equality.
   — Computational properties.
   — Interval and De Morgan laws.
   — Generalized Transport.
   — Strict equality on partial and interval pretypes.
   — Cubical subtypes.
   — Generalized Homogeneous Composition.

   HoTT 1.12 Identity types
   HoTT 1.12.1 Path induction
   HoTT 2.1 Types are higher groupoids
   HoTT 2.11 Identity type
   HoTT 3.11 Contractibility
   HoTT 6.2 Induction principles and dependent paths.

   Copyright © Groupoid Infinity, 2021—2022,
             © @siegment, 2022 -}

import library/proto

def const₁ (A : U) : A → 𝟏 := const 𝟏 A ★
def LineP (A : I → U) : V := Π (i : I), A i

-- Path Equality
def Path (A : U) (x y : A) : U := PathP (<_> A) x y
def idp (A : U) (x : A) : Path A x x := <_> x
def singl (A : U) (a : A) : U := Σ (x : A), Path A a x
def eta (A : U) (a : A) : singl A a := (a, idp A a)
def sym (A : U) (a b : A) (p : Path A a b) : Path A b a := <i> p @ -i

def contr (A : U) (a b : A) (p : Path A a b) : Path (singl A a) (eta A a) (b, p) := <i> (p @ i, <j> p @ i ∧ j)
def isContr (A : U) : U := Σ (x : A), Π (y : A), Path A x y
def isContrSingl (A : U) (a : A) : isContr (singl A a) := ((a, idp A a), (λ (z : singl A a), contr A a z.1 z.2))

def ap (A B : U) (f : A → B) (a b : A) (p : Path A a b) : Path B (f a) (f b) := <i> f (p @ i)
def apd (A : U) (B : A → U) (f : Π (x : A), B x) (a b : A) (p : Path A a b) : PathP (<i> B (p @ i)) (f a) (f b) := <i> f (p @ i)

def Path-η (A : U) (x y : A) (p : Path A x y) : Path (Path A x y) p (<i> p @ i) := <_> p

def idp-left (A : U) (x y : A) (p : Path A x y) : Path (Path A x x) (<_> x) (<_> p @ 0) := <_ _> x
def idp-right (A : U) (x y : A) (p : Path A x y) : Path (Path A y y) (<_> y) (<_> p @ 1) := <_ _> y
def sym-sym-eq-idp (A : U) (x y : A) (p : Path A x y) : Path (Path A x y) p (sym A y x (sym A x y p)) := <_> p

section
  variables (A B : U) (f : A → B) (g : B → A)

  def rinv := Π (b : B), Path B (f (g b)) b
  def linv := Π (a : A), Path A (g (f a)) a
end

-- https://github.com/mortberg/cubicaltt/blob/master/examples/circle.ctt#L62-L65
def hmtpy (A : U) (x y : A) (p : Path A x y) : Path (Path A x x) (<_> x) (<i> p @ i ∧ -i) := <j i> p @ j ∧ i ∧ -i

def plam (A : U) (f : I → A) : Path A (f 0) (f 1) := <i> f i
def elim (A : U) (a b : A) (p : Path A a b) : I → A := λ (i : I), p @ i
def plam-elim (A : U) (f : I → A) : Id (I → A) (elim A (f 0) (f 1) (plam A f)) f := ref f
def elim-plam (A : U) (a b : A) (p : Path A a b) : Path (Path A a b) (plam A (elim A a b p)) p := <_> p

def isProp (A : U) := Π (a b : A), Path A a b
def isSet (A : U) := Π (a b : A), isProp (Path A a b)
def isGroupoid (A : U) := Π (a b : A), isSet (Path A a b)

def Ω := Σ (A : U), isProp A
def Set := Σ (X : U), isSet X

-- Computational Properties
def transport (A B : U) (p : PathP (<_> U) A B) (a : A) : B := transp p 0 a
def subst (A : U) (P : A → U) (a b : A) (p : Path A a b) (e : P a) : P b := transp (<i> P (p @ i)) 0 e

def trans-comp (A : U) (a : A) : Path A a (transport A A (<i> A) a) := <j> transp (<_> A) -j a
def subst-comp (A : U) (P : A → U) (a : A) (e : P a) : Path (P a) e (subst A P a a (idp A a) e) := trans-comp (P a) e

def D (A : U) : U₁ := Π (x y : A), Path A x y → U
def J (A : U) (x : A) (C : D A) (d : C x x (idp A x)) (y : A) (p : Path A x y) : C x y p :=
subst (singl A x) (λ (z : singl A x), C x (z.1) (z.2)) (eta A x) (y, p) (contr A x y p) d

def J-β (A : U) (a : A) (C : D A) (d : C a a (idp A a)) : Path (C a a (idp A a)) d (J A a C d a (idp A a)) :=
subst-comp (singl A a) (λ (z : singl A a), C a (z.1) (z.2)) (eta A a) d

-- (<i j> p @ i ∧ j) @ 0 ≡ <j> p @ 0 ∧ j ≡ <j> p @ 0 ≡ <_> a,
-- (<i j> p @ i ∧ j) @ 1 ≡ <j> p @ 1 ∧ j ≡ <j> p @ j ≡ p,
-- but it doesn’t check since <j> p @ i ∧ j : Path A (p @ i ∧ 0) (p @ i ∧ 1) ≡ Path A a (p @ i), which is “Path A a a” only propositionally
-- def K (A : U) (a : A) (p : Path A a a) : Path (Path A a a) (<_> a) p := <i j> p @ i ∧ j

-- DNF solver
def ∂ (i : I) := i ∨ -i
def ∂-eq-neg-∂ (i : I) : Id I (∂ i) (∂ -i) := ref (∂ i)

def min (i j : I) := i ∧ j
def max (i j : I) := i ∨ j

def ⊕ (i j : I) : I := (i ∧ -j) ∨ (-i ∧ j)
def ⊕-comm (i j : I) : Id I (⊕ i j) (⊕ j i) := ref (⊕ i j)

def ∧-comm (i j : I) : Id I (i ∧ j) (j ∧ i) := ref (i ∧ j)
def ∨-comm (i j : I) : Id I (i ∨ j) (j ∨ i) := ref (i ∨ j)

def ¬-of-∧ (i j : I) : Id I -(i ∧ j) (-i ∨ -j) := ref -(i ∧ j)
def ¬-of-∨ (i j : I) : Id I -(i ∨ j) (-i ∧ -j) := ref -(i ∨ j)

def ∧-distrib-∨ (i j k : I) : Id I ((i ∨ j) ∧ k) ((i ∧ k) ∨ (j ∧ k)) := ref ((i ∨ j) ∧ k)
def ∨-distrib-∧ (i j k : I) : Id I ((i ∧ j) ∨ k) ((i ∨ k) ∧ (j ∨ k)) := ref ((i ∧ j) ∨ k)

def ∧-assoc (i j k : I) : Id I (i ∧ (j ∧ k)) ((i ∧ j) ∧ k) := ref (i ∧ (j ∧ k))

-- Strict Equality
def 1= : I → V := Id I 1
def 1=1 : 1= 1 := ref 1
def UIP (A : V) (a b : A) (p q : Id A a b) : Id (Id A a b) p q := ref p

def Jˢ (A : V) (B : Π (a b : A), Id A a b → V) (a b : A) (d : B a a (ref a)) (p : Id A a b) : B a b p := idJ A B a d b p
def Jˢ-β (A : V) (B : Π (a b : A), Id A a b → V) (a : A) (d : B a a (ref a)) : Id (B a a (ref a)) (Jˢ A B a a d (ref a)) d := ref d
def rev (A : V) (a b : A) (p : Id A a b) : Id A b a := idJ A (λ (a b : A) (_ : Id A a b), Id A b a) a (ref a) b p
def comp-Id (A : V) (a b c : A) (p : Id A a b) (q : Id A b c) : Id A a c := idJ A (λ (b c : A) (_ : Id A b c), Id A a c) b p c q
def cong-Id (A B : V) (f : A → B) (a b : A) (p : Id A a b) : Id B (f a) (f b) := idJ A (λ (a b : A) (_ : Id A a b), Id B (f a) (f b)) a (ref (f a)) b p

def φ (i : I) : Partial U₁ (i ∨ -i) := [(i = 0) → U, (i = 1) → U → U]
def φ′ (i : I) : Partial U₁ (i ∨ -i) := [(i = 1) → U → U, (i = 0) → U]
def ψ (i j : I) : Partial U₁ (-i ∨ i ∨ (i ∧ j)) := [(i = 1) → U, (i = 1) (j = 1) → U, (i = 0) → U → U]

def φ-0 : PathP (<_> U₁) (φ 0 1=1) U := <_> U
def φ-1 : PathP (<_> U₁) (φ 1 1=1) (U → U) := <_> U → U

def φ-eq-φ′ (i : I) : Id (Partial U₁ (i ∨ -i)) (φ i) (φ′ i) := ref (φ′ i)

def ρ (i j : I) : Partial U₁ (-i ∨ (i ∧ j)) := [(i = 0) → U, (i = 1) (j = 1) → U]
def κ : Partial U₁ 1 := [(1 = 1) → U]
def θ (A B : U) (a : A) (b : B) (φ : I) : PartialP [(φ = 0) → A, (φ = 1) → B] (φ ∨ -φ) := [(φ = 0) → a, (φ = 1) → b]

-- should fail
--def φ″ (i j : I) := [(i = 0) → U, (j = 0) → U → U]

def ψ′ (A B : U) (p : PathP (<_> U) A B) (i : I) := [(i = 1) → p @ i]

def partial-app-test (A : U) (a : A) (φ : I) (p : 1= φ) : A := [(φ = 1) → a] p

def ≤ (i j : I) := Id I (i ∧ j) i
def ≥ (i j : I) := ≤ j i

def ∧-split (i j : I) : Partial (1= i) (i ∧ j) := [(i = 1) (j = 1) → 1=1]

def ∨-left  (i j : I) (p : 1= i) : 1= (i ∨ j) := idJ I (λ (i i′ : I) (_ : Id I i i′), Id I 1 (i′ ∨ j)) 1 1=1 i p
def ∨-right (i j : I) (p : 1= j) : 1= (i ∨ j) := ∨-left j i p -- works due to commutativity of ∨

def ∧-1  (i j : I) (p : 1= (i ∧ j)) : 1= i := ∧-split i j p
def ∧-1′ (i j : I) (p : 1= (i ∧ j)) : 1= i := cong-Id I I (λ (k : I), k ∨ i) 1 (i ∧ j) p

def ∧-min-left  (i j : I) : ≤ (i ∧ j) i := ref (i ∧ j)
def ∧-min-right (i j : I) : ≤ (i ∧ j) j := ref (i ∧ j)
def ∨-max-left  (i j : I) : ≤ i (i ∨ j) := ref i
def ∨-max-right (i j : I) : ≤ j (i ∨ j) := ref j

def ∧-to-∨ (i j : I) (p : Id I (i ∧ j) i) : Id I (i ∨ j) j := rev I j (i ∨ j) (cong-Id I I (λ (k : I), k ∨ j) (i ∧ j) i p)

def ≤-asymm (i j : I) (p : ≤ i j) (q : ≤ j i) : Id I i j := comp-Id I i (i ∧ j) j (rev I (i ∧ j) i p) q
def ≤-refl (i : I) : ≤ i i := ref i
def ≤-trans (i j k : I) (p : ≤ i j) (q : ≤ j k) : ≤ i k :=
comp-Id I (i ∧ k) (i ∧ j) i
  (comp-Id I (i ∧ k) (i ∧ j ∧ k) (i ∧ j)
    (rev I (i ∧ j ∧ k) (i ∧ k) (cong-Id I I (min k) (i ∧ j) i p))
    (cong-Id I I (min i) (j ∧ k) j q)) p

def 0-is-min (i : I) : ≤ 0 i := ref 0
def 1-is-max (i : I) : ≤ i 1 := ref i

def Δ² := Σ (i j : I), ≤ i j

def Δ²-1 : Δ² := (0, 0, ref 0)
def Δ²-2 : Δ² := (0, 1, ref 0)
def Δ²-3 : Δ² := (1, 1, ref 1)

def Δ²-1-2 : PathP (<_> Δ²) Δ²-1 Δ²-2 := <i> (0, i, ref 0)
def Δ²-2-3 : PathP (<_> Δ²) Δ²-2 Δ²-3 := <i> (i, 1, ref i)
def Δ²-1-3 : PathP (<_> Δ²) Δ²-1 Δ²-3 := <i> (i, i, ref i)

def Δ³ := Σ (i j k : I), (≤ i j) × (≤ j k)

def Δ³-1 : Δ³ := (0, 0, 0, ref 0, ref 0)
def Δ³-2 : Δ³ := (0, 0, 1, ref 0, ref 0)
def Δ³-3 : Δ³ := (0, 1, 1, ref 0, ref 1)
def Δ³-4 : Δ³ := (1, 1, 1, ref 1, ref 1)

def Δ³-1-2 : PathP (<_> Δ³) Δ³-1 Δ³-2 := <i> (0, 0, i, ref 0, ref 0)
def Δ³-2-3 : PathP (<_> Δ³) Δ³-2 Δ³-3 := <i> (0, i, 1, ref 0, ref i)
def Δ³-1-3 : PathP (<_> Δ³) Δ³-1 Δ³-3 := <i> (0, i, i, ref 0, ref i)

def Δ³-1-4 : PathP (<_> Δ³) Δ³-1 Δ³-4 := <i> (i, i, i, ref i, ref i)
def Δ³-2-4 : PathP (<_> Δ³) Δ³-2 Δ³-4 := <i> (i, i, 1, ref i, ref i)
def Δ³-3-4 : PathP (<_> Δ³) Δ³-3 Δ³-4 := <i> (i, 1, 1, ref i, ref 1)

def ε (A : U) : Partial A 0 := []
def I-nontriv (p : Id I 0 1) : 𝟎 := ε 𝟎 (rev I 0 1 p)
def 0≥1-impl-absurd : (≥ 0 1) → 𝟎 := I-nontriv

def seg : PathP (<_> I) 0 1 := <i> i

-- Cubical Subtypes
def Partial′ (A : U) (i : I) := Partial A i
def Partial-app (A : U) (i : I) (u : Partial A i) (p : 1= i) : A := u p
def Id-path (A : U) (a b : A) : Id A a b → Path A a b := idJ A (λ (a b : A) (_ : Id A a b), Path A a b) a (<_> a) b
def sub (A : U) (i : I) (u : Partial A i) : V := A[i ↦ u]
def inc′ (A : U) (i : I) (a : A) : sub A i [(i = 1) → a] := inc A i a
def ouc′ (A : U) (i : I) (u : Partial A i) (a : A[i ↦ u]) : A := ouc a

def Path′ (A : U) (a b : A) := Π (i : I), A [∂ i ↦ [(i = 0) → a, (i = 1) → b]]
def Path-Path′ (A : U) (a b : A) (p : Path A a b) : Path′ A a b := λ (i : I), inc A (∂ i) (p @ i)
def Path′-Path (A : U) (a b : A) (p : Path′ A a b) : Path A a b := <i> ouc (p i)
def Path-Path′-Path (A : U) (a b : A) (p : Path A a b) : Path (Path A a b) (Path′-Path A a b (Path-Path′ A a b p)) p := <_> p
def Path′-Path-Path′ (A : U) (a b : A) (p : Path′ A a b) : PathP (<_> Path′ A a b) (Path-Path′ A a b (Path′-Path A a b p)) p := <_> p

-- Generalized Transport
def transp′ (A : U) (j : I) (p : (I → U) [j ↦ [(j = 1) → λ (_ : I), A]]) := transp (<i> (ouc p) i) j
def trans (A B : U) (p : PathP (<_> U) A B) : A → B := transp p 0
def trans⁻¹ (A B : U) (p : PathP (<_> U) A B) : B → A := transp (<i> p @ -i) 0
def subst′ (A : U) (P : A → U) (a b : A) (p : Path A a b) (e : P a) : P b := transp (<i> P (p @ i)) 0 e
def coerce (A B : U) (p : PathP (<_> U) A B): A → B := λ (x : A), trans A B p x
def pcomp (A : U) (a b c : A) (p : Path A a b) (q : Path A b c): Path A a c := subst A (Path A a) b c q p
def transId (A : U) : A → A := transp (<_> A) 1

def trans⁻¹-trans (A B : U) (p : PathP (<_> U) A B) (b : B) : Path B (trans A B p (trans⁻¹ A B p b)) b :=
<i> transp (<j> p @ i ∨ j) i (transp (<j> p @ i ∨ -j) i b)

def trans-trans⁻¹ (A B : U) (p : PathP (<_> U) A B) (a : A) : Path A a (trans⁻¹ A B p (trans A B p a)) :=
<i> transp (<j> p @ i ∧ -j) -i (transp (<j> p @ i ∧ j) -i a)

def transFill (A B : U) (p : PathP (<_> U) A B) (a : A) : PathP p a (transp p 0 a) :=
<j> transp (<i> p @ i ∧ j) -j a

def fill (A : I → U) (x : A 0) : PathP (<i> A i) x (transp (<i> A i) 0 x) :=
<j> transp (<i> A (i ∧ j)) -j x

def comp-Path′ (A : U) (a b c : A) (p : Path A a b) (q : Path A b c) : Path A a c :=
transp (<i> Path A a (q @ i)) 0 p

def inv′ (A : U) (a b : A) (p : Path A a b) : Path A b a :=
<i> hcomp A (∂ i) (λ (j : I), [(i = 0) → p @ j, (i = 1) → a]) a

-- Homogeneous Composition

def hcomp′ (A : U) (r : I) (u : I → Partial A r) (u₀ : A[r ↦ u 0]) : A := hcomp A r u (ouc u₀)
def hcomp-ε (A : U) (a : A) := hcomp A 0 (λ (i : I), []) a
def hcomp-ε→id (A : U) (a : A) : Path A (hcomp-ε A a) a := <i> hcomp A i (λ (j : I), [(i = 1) → a]) a

def comp-Path (A : U) (a b c : A) (p : Path A a b) (q : Path A b c) : Path A a c :=
<i> hcomp A (∂ i) (λ (j : I), [(i = 0) → a, (i = 1) → q @ j]) (p @ i)

def comp-inv-Path⁻¹ (A : U) (a b : A) (p : Path A a b) : Path (Path A a a) (comp-Path A a b a p (<i> p @ -i)) (<_> a) :=
<k j> hcomp A (∂ j ∨ k) (λ (i : I), [(j = 0) → a, (j = 1) → p @ -i ∧ -k, (k = 1) → a]) (p @ j ∧ -k)

def comp-inv-Path (A : U) (a b : A) (p : Path A a b) : Path (Path A b b) (comp-Path A b a b (<i> p @ -i) p) (<_> b) :=
<j i> hcomp A (∂ i ∨ j) (λ (k : I), [(i = 0) → b, (j = 1) → b, (i = 1) → p @ j ∨ k]) (p @ -i ∨ j)

def comp-Path-left (A : U) (a b : A) (p : Path A a b) : Path (Path A a b) p (comp-Path A a a b (<_> a) p) :=
<j i> hcomp A (∂ i ∨ -j) (λ (k : I), [(i = 0) → a, (i = 1) → p @ k, (j = 0) → p @ i ∧ k]) a

def comp-Path-right (A : U) (a b : A) (p : Path A a b) : Path (Path A a b) p (comp-Path A a b b p (<_> b)) :=
<j i> hcomp A (∂ i ∨ -j) (λ (k : I), [(i = 0) → a, (i = 1) → b, (j = 0) → p @ i]) (p @ i)

def comp-Path-assoc (A : U) (a b c d : A) (f : Path A a b) (g : Path A b c) (h : Path A c d) :
  Path (Path A a d) (comp-Path A a c d (comp-Path A a b c f g) h) (comp-Path A a b d f (comp-Path A b c d g h)) :=
J A a (λ (a : A) (b : A) (f : Path A a b), Π (c d : A) (g : Path A b c) (h : Path A c d),
       Path (Path A a d) (comp-Path A a c d (comp-Path A a b c f g) h) (comp-Path A a b d f (comp-Path A b c d g h)))
  (λ (c d : A) (g : Path A a c) (h : Path A c d),
    comp-Path (Path A a d)
      (comp-Path A a c d (comp-Path A a a c (<_> a) g) h)
      (comp-Path A a c d g h)
      (comp-Path A a a d (<_> a) (comp-Path A a c d g h))
      (<i> comp-Path A a c d (comp-Path-left A a c g @ -i) h)
      (comp-Path-left A a d (comp-Path A a c d g h))) b f c d g h

def kan (A : U) (a b c d : A) (p : Path A a c) (q : Path A b d) (r : Path A a b) : Path A c d :=
<i> hcomp A (∂ i) (λ (j : I), [(i = 0) → p @ j, (i = 1) → q @ j]) (r @ i)

def comp (A : I → U) (r : I) (u : Π (i : I), Partial (A i) r) (u₀ : (A 0)[r ↦ u 0]) : A 1 :=
hcomp (A 1) r (λ (i : I), [(r = 1) → transp (<j> A (i ∨ j)) i (u i 1=1)]) (transp (<i> A i) 0 (ouc u₀))

def ghcomp (A : U) (r : I) (u : I → Partial A r) (u₀ : A[r ↦ u 0]) : A :=
hcomp A (∂ r) (λ (j : I), [(r = 1) → u j 1=1, (r = 0) → ouc u₀]) (ouc u₀)

def ghcomp-ε (A : U) (a : A) : Path A (ghcomp A 0 (λ (i : I), []) (inc A 0 a)) a := <_> a

section
  variables (A : U) (r : I) (u : I → Partial A r) (u₀ : A[r ↦ u 0])

  def hfill (j : I) :=
  hcomp A (-j ∨ r) (λ (i : I), [(r = 1) → u (i ∧ j) 1=1, (j = 0) → ouc u₀]) (ouc u₀)

  def hfill′ : Path A (ouc u₀) (hcomp A r u (ouc u₀)) :=
  <j> hfill A r u u₀ j
end

section
  variables (A : U) (x y z : A) (p : Path A x y) (q : Path A y z)

  def trans-filler : PathP (<i> Path A x (q @ i)) p (comp-Path A x y z p q) :=
  <j i> hfill A (∂ i) (λ (k : I), [(i = 0) → x, (i = 1) → q @ k]) (inc A (∂ i) (p @ i)) j

  def trans-filler-p : PathP (<i> Path A x (q @ i)) p (comp-Path A x y z p q) :=
  <j i> hcomp A (-j ∨ ∂ i) (λ (k : I), [(i = 0) → x, (i = 1) → q @ (k ∧ j), (j = 0) → p @ i]) (p @ i)

  def trans-filler-q : PathP (<i> Path A (p @ -i) z) q (comp-Path A x y z p q) :=
  <j i> hcomp A (-j ∨ ∂ i) (λ (k : I), [(i = 0) → p @ -j, (i = 1) → q @ k, (j = 0) → q @ i ∧ k]) (p @ i ∨ -j)
end

section
  variables (A : I → U) (B : Π (i : I), A i → U) (f : Π (x : A 0), B 0 x)

  def trans-Π : Π (x : A 1), B 1 x :=
  λ (x : A 1), transp (<j> B j (transFill (A 1) (A 0) (<i> A -i) x @ -j)) 0 (f (transp (<i> A -i) 0 x))

  def trans-Π′ : Π (x : A 1), B 1 x :=
  transp (<i> Π (x : A i), B i x) 0 f

  def trans-Π-is-correct : Path (Π (x : A 1), B 1 x) (trans-Π A B f) (trans-Π′ A B f) :=
  <_> trans-Π A B f
end

section
  variables (A : I → U) (B : Π (i : I), A i → U) (z : Σ (x : A 0), B 0 x)

  def trans-Σ : Σ (x : A 1), B 1 x :=
  (transp (<i> A i) 0 z.1, transp (<j> B j (transp (<i> A (i ∧ j)) -j z.1)) 0 z.2)

  def trans-Σ′ : Σ (x : A 1), B 1 x :=
  transp (<i> Σ (x : A i), B i x) 0 z

  def trans-Σ-is-correct : Path (Σ (x : A 1), B 1 x) (trans-Σ A B z) (trans-Σ′ A B z) :=
  <_> trans-Σ A B z
end

section
  variables (A B : I → U) (P : Π (i : I), PathP (<_> U) (A i) (B i)) (v : Π (i : I), P i @ 0)
            (w : Π (i : I), P i @ 1) (u₀ : PathP (<i> P 0 @ i) (v 0) (w 0))

  def trans-Path : PathP (<i> P 1 @ i) (v 1) (w 1) :=
  <j> comp (λ (i : I), P i @ j) (∂ j) (λ (i : I), [(j = 0) → v i, (j = 1) → w i]) (inc (P 0 @ j) (∂ j) (u₀ @ j))

  def trans-Path′ : PathP (<i> P 1 @ i) (v 1) (w 1) :=
  transp (<i> PathP (P i) (v i) (w i)) 0 u₀

  def trans-Path-is-correct : Path (PathP (<i> P 1 @ i) (v 1) (w 1))
                                   (trans-Path A B P v w u₀)
                                   (trans-Path′ A B P v w u₀) :=
  <_> trans-Path A B P v w u₀
end

section
  variables (A : U) (B : A → U) (r : I) (u : I → Partial (Π (x : A), B x) r) (u₀ : (Π (x : A), B x)[r ↦ u 0])

  def hcomp-Π := λ (v : A), hcomp (B v) r (λ (k : I), [(r = 1) → u k 1=1 v]) ((ouc u₀) v)
  def hcomp-Π′ := hcomp (Π (x : A), B x) r u (ouc u₀)

  def hcomp-Π-is-correct : Path (Π (x : A), B x) (hcomp-Π A B r u u₀) (hcomp-Π′ A B r u u₀) :=
  <_> hcomp-Π A B r u u₀
end

section
  variables (A : U) (B : A → U) (r : I) (u : I → Partial (Σ (x : A), B x) r) (u₀ : (Σ (x : A), B x)[r ↦ u 0])

  def hcomp-Σ : Σ (x : A), B x :=
  (hfill A r (λ (k : I), [(r = 1) → (u k 1=1).1]) (inc A r (ouc u₀).1) 1,
   comp (λ (i : I), B (hfill A r (λ (k : I), [(r = 1) → (u k 1=1).1]) (inc A r (ouc u₀).1) i))
      r (λ (k : I), [(r = 1) → (u k 1=1).2]) (inc (B (ouc u₀).1) r (ouc u₀).2))

  def hcomp-Σ′ : Σ (x : A), B x :=
  hcomp (Σ (x : A), B x) r u (ouc u₀)

  def hcomp-Σ-is-correct : Path (Σ (x : A), B x) (hcomp-Σ A B r u u₀) (hcomp-Σ′ A B r u u₀) :=
  <_> hcomp-Σ A B r u u₀
end

section
  variables (A : U) (v w : A) (r : I) (u : I → Partial (Path A v w) r) (u₀ : (Path A v w)[r ↦ u 0])

  def hcomp-Path : Path A v w :=
  <j> hcomp A (r ∨ ∂ j) (λ (i : I), [(r = 1) → u i 1=1 @ j, (j = 0) → v, (j = 1) → w]) (ouc u₀ @ j)

  def hcomp-Path′ := hcomp (Path A v w) r u (ouc u₀)

  def hcomp-Path-is-correct : Path (Path A v w) (hcomp-Path A v w r u u₀) (hcomp-Path′ A v w r u u₀) :=
  <_> hcomp-Path A v w r u u₀
end

def hcomp-U (r : I) (E : I → Partial U r) (A : (U)[r ↦ E 0]) := hcomp U r E (ouc A)

section
  variables (A B : U) (f : A → B) (g : B → A)

  def sec := Π (b : B), Path B (f (g b)) b
  def ret := Π (a : A), Path A (g (f a)) a
end

section
  variables (A B : U) (f : A → B)

  def has-sec := Σ (g : B → A), sec A B f g
  def has-ret := Σ (g : B → A), ret A B f g

  def is-path-split-equiv :=
  (has-sec A B f) × (Π (x y : A), has-sec (Path A x y) (Path B (f x) (f y)) (ap A B f x y))
end

def 𝟏-contr : Π (x : 𝟏), Path 𝟏 x ★ := ind₁ (λ (x : 𝟏), Path 𝟏 x ★) (<_> ★)

def contr-impl-prop (A : U) (H : isContr A) : isProp A :=
λ (a b : A), <i> hcomp A (∂ i) (λ (j : I), [(i = 0) → H.2 a @ j, (i = 1) → H.2 b @ j]) H.1

def idfun  (A : U) : A → A := λ (a : A), a
def idfun′ (A : U) : A → A := transp (<_> A) 0
def idfun″ (A : U) : A → A := λ (a : A), hcomp A 0 (λ (i : I), []) a

def idfun=idfun′  (A : U) : Path (A → A) (idfun A)  (idfun′ A) := <i> transp (<_> A) -i
def idfun=idfun″  (A : U) : Path (A → A) (idfun A)  (idfun″ A) := <i> λ (a : A), hcomp A -i (λ (j : I), [(i = 0) → a]) a
def idfun′=idfun″ (A : U) : Path (A → A) (idfun′ A) (idfun″ A) :=
comp-Path (A → A) (idfun′ A) (idfun A) (idfun″ A) (<i> idfun=idfun′ A @ -i) (idfun=idfun″ A)
