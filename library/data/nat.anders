{- Natural numbers.
   HoTT 5.3 W-Types

   Copyright © Groupoid Infinity, 2021—2022,
             © @siegment, 2022 -}

import library/data/path

def ℕ-indω (n : L) (C : ℕ → U n) (z : C zero) (s : Π (m : ℕ), C m → C (succ m)) : Π (m : ℕ), C m :=
ℕ-ind C z s

def ℕ-recω (n : L) (C : U n) (z : C) (s : ℕ → C → C) : ℕ → C := ℕ-indω n (λ (_ : ℕ), C) z s
def ℕ-iterω (n : L) (C : U n) (z : C) (s : C → C) : ℕ → C := ℕ-recω n C z (λ (_ : ℕ), s)
def ℕ-caseω (n : L) (C : U n) (z s : C) : ℕ → C := ℕ-iterω n C z (λ (_ : C), s)

def ℕ-rec  := ℕ-recω L₀
def ℕ-iter := ℕ-iterω L₀
def ℕ-case := ℕ-indω L₀

def plus : ℕ → ℕ → ℕ := ℕ-iter (ℕ → ℕ) (idfun ℕ) (∘ ℕ ℕ ℕ succ)
def mult : ℕ → ℕ → ℕ := ℕ-rec (ℕ → ℕ) (λ (_ : ℕ), zero) (λ (_ : ℕ) (x : ℕ → ℕ) (m : ℕ), plus m (x m))

def one   : ℕ := succ zero
def two   : ℕ := succ one
def three : ℕ := succ two
def four  : ℕ := succ three
def five  : ℕ := succ four

def 5′  : ℕ := plus two three
def 10′ : ℕ := mult 5′ two
def 55′ : ℕ := plus (mult 5′ 10′) 5′