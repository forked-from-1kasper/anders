{- Fiber Bundle: https://groupoid.space/math/bundle/
   - Fiber Bundle;
   - Trivial Fiber Bundle, Bundle=Pi;
   - Local F-Bundle (4 definitions).
   Copyright (c) Groupoid Infinity, 2014-2022. -}

module bundle where
import library/sigma
import library/iso

def Family (B : U) : U₁ := B -> U
def Fibration (B : U) : U₁ := Σ (X : U), X -> B
def fiber₀ (A B: U) (f: A -> B) (y: B) : U := Σ (x: A), Path B (f x) y

def encode (B : U) (F : B -> U) (y : B) : fiber₀ (Sigma B F) B (pr₁ B F) y -> F y
 := \ (x : fiber₀ (Sigma B F) B (pr₁ B F) y), subst B F x.1.1 y x.2 x.1.2

def decode (B: U) (F: B -> U) (y: B) : F y -> fiber₀ (Sigma B F) B (pr₁ B F) y
 := \ (x: F y), ((y,x),idp B y)

axiom lem2 (B: U) (F: B -> U) (y: B) (x: F y)
  : Path (F y) (transp (<i>F (idp B y @ i)) 0 x) x
-- := <j> comp (F y) (j /\ -j) (<i>F (idp B y @ j/\i)) x ([(j=1) -> <k>x])

axiom lem3 (B: U) (F: B -> U) (y: B) (x: fiber₀ (Sigma B F) B (pr₁ B F) y)
  : Path (fiber₀ (Sigma B F) B (pr₁ B F) y) ((y,encode B F y x),idp B y) x
-- := <i> ((x.2 @ -i,comp (<j> F (x.2 @ -i /\ j))
--        x.1.2 [(i=1) -> <_> x.1.2 ]),<j> x.2 @ -i \/ j)

def Bundle=Pi (B: U) (F: B -> U) (y: B)
  : PathP (<_>U) (fiber₀ (Sigma B F) B (pr₁ B F) y) (F y)
 := isoPath (fiber₀ (Sigma B F) B (pr₁ B F) y) (F y)
    (encode B F y) (decode B F y) (lem2 B F y) (lem3 B F y)
