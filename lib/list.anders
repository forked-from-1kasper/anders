{- Run-Time List Type:
   - List;
   - Polymorphic funtions.
   Copyright (c) Groupoid Infinity, 2014-2021. -}

module list where
import lib/leibniz
import lib/bool
option girard true

def ∘ (α β γ : U) (f : β → γ) (g : α → β) : α → γ ≔ λ (x : α), f (g x)
def const (α β : U) : α → β → α ≔ λ (a : α) (b : β), a
def list (α : U) : U ≔ Π (μ : U), μ → (α → μ → μ) → μ
def nil (α : U) : list α ≔ λ (μ : U) (n : μ) (c : α → μ → μ), n
def ∷ (α : U) (x : α) (xs : list α) : list α ≔ λ (μ : U) (n : μ) (c : α → μ → μ), c x (xs μ n c)
def list-map (α β : U) (f : α → β) (xs : list α) : list β ≔ λ (μ : U) (n : μ) (c : β → μ → μ), xs μ n (∘ α β (μ → μ) c f)
def list-pure (α : U) : α → list α ≔ λ (a : α), ∷ α a (nil α)
def lst₁ : list N ≔ ∷ N N0 (∷ N N1 (∷ N N2 (∷ N N3 (nil N))))
def lst₂ : list N ≔ ∷ N N1 (∷ N N2 (∷ N N3 (∷ N N4 (nil N))))

theorem map-succ-lst₁-eq-lst₂ : eq (list N) (list-map N N succ lst₁) lst₂ ≔ refl (list N) lst₂

def append (α : U) (xs : list α) (ys : list α) : list α ≔ λ (μ : U) (n : μ) (c : α → μ → μ), xs μ (ys μ n c) c

def lst₃ : list N ≔ ∷ N N0 (∷ N N1 (nil N))
def lst₄ : list N ≔ ∷ N N2 (∷ N N3 (nil N))

theorem lst₃-append-lst₄-eq-lst₁ : eq (list N) (append N lst₃ lst₄) lst₁ ≔ refl (list N) lst₁

def join (α : U) (xs : list (list α)) : list α ≔ xs (list α) (nil α) (append α)
def lst₅ : list (list N) ≔ ∷ (list N) lst₃ (∷ (list N) lst₄ (nil (list N)))

theorem join-lst₅-eq-lst₁ : eq (list N) (join N lst₅) lst₁ ≔ refl (list N) lst₁

def list-bind (α β : U) (x : list α) (f : α → list β) : list β ≔ join β (list-map α (list β) f x)
def monad ≔ Σ (μ : U → U) (pure : Π (α : U), α → μ α), (Π (α β : U), μ α → (α → μ β) → μ β)
def pure (μ : monad) : Π (α : U), α → μ.1 α ≔ μ.2.1
def bind (μ : monad) : Π (α β : U), μ.1 α → (α → μ.1 β) → μ.1 β ≔ μ.2.2
def map (μ : monad) (α β : U) (f : α → β) (x : μ.1 α) : μ.1 β ≔ bind μ α β x (∘ α β (μ.1 β) (pure μ β) f)

def filterM (μ : monad) (α : U) (f : α → μ.1 bool) (lst : list α) : μ.1 (list α)
 ≔ lst (μ.1 (list α)) (pure μ (list α) (nil α))
    (λ (x : α) (xs : μ.1 (list α)), bind μ bool (list α) (f x)
      (λ (b : bool), ite (μ.1 (list α))
        (map μ (list α) (list α) (∷ α x) xs) xs b))

def List : monad ≔ (list, list-pure, list-bind)
def true-false : list bool ≔ ∷ bool true (∷ bool false (nil bool))
def powerset (α : U) : list α → list (list α) ≔ filterM List α (const (list bool) α true-false)

def lst₃-powerset : list (list N) ≔
∷ (list N) lst₃
  (∷ (list N) (list-pure N N0)
    (∷ (list N) (list-pure N N1)
      (∷ (list N) (nil N)
        (nil (list N)))))

theorem powerset-correct-at-list₃ : eq (list (list N)) (powerset N lst₃) lst₃-powerset
     ≔ refl (list (list N)) lst₃-powerset