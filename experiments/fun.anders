{- Category Theory:
   - Functor;
   - Coslice Category;
   - Universal Arrow;
   - Equivalence.
   Copyright (c) Groupoid Infinity, 2014-2018.

   HoTT 9.2 Functors and transformations
   HoTT 9.4 Equivalences -}

module fun where
import experiments/cat

def catfunctor (A B: precategory): U := Σ
    (ob: carrier A -> carrier B)
    (mor: Π (x y: carrier A), hom A x y -> hom B (ob x) (ob y))
    (id: Π (x: carrier A), Path (hom B (ob x) (ob x)) (mor x x (path A x)) (path B (ob x))),
    Π (x y z: carrier A) (f: hom A x y) (g: hom A y z),
    Path (hom B (ob x) (ob z)) (mor x z (compose A x y z f g)) (compose B (ob x) (ob y) (ob z) (mor x y f) (mor y z g))

def isHae (A B: U) (f: A -> B): U := Σ
    (g: B -> A)
    (eta: Path (idᵀ A) (∘ A B A g f) (id A))
    (eps: Path (idᵀ B) (∘ B A B f g) (id B)),
    Π (x: A), Path B (f ((eta @ 0) x)) ((eps @ 0) (f x))

def idFunctor (A: precategory): catfunctor A A :=
    (λ (x: carrier A), x,
     λ (x y: carrier A) (h: hom A x y), h,
     λ (x: carrier A), <_> path A x,
     λ (x y z: carrier A) (f: hom A x y) (g: hom A y z), <_> compose A x y z f g)

def compFunctor (A B C: precategory) (F: catfunctor A B) (G: catfunctor B C): catfunctor A C :=
    (λ (x: carrier A), G.1 (F.1 x),
     λ (x y: carrier A) (h: hom A x y), G.2.1 (F.1 x) (F.1 y) (F.2.1 x y h),
     λ (x: carrier A), pcomp (hom C (G.1 (F.1 x)) (G.1 (F.1 x))) (G.2.1 (F.1 x) (F.1 x) (F.2.1 x x (path A x)))
       (G.2.1 (F.1 x) (F.1 x) (path B (F.1 x))) (path C (G.1 (F.1 x))) (<i>G.2.1 (F.1 x) (F.1 x) (F.2.2.1 x @ i)) (G.2.2.1 (F.1 x)),
     λ (x y z: carrier A) (f: hom A x y) (g: hom A y z), pcomp (hom C (G.1 (F.1 x)) (G.1 (F.1 z)))
       (G.2.1 (F.1 x) (F.1 z) (F.2.1 x z (compose A x y z f g)))
       (G.2.1 (F.1 x) (F.1 z) (compose B (F.1 x) (F.1 y) (F.1 z) (F.2.1 x y f) (F.2.1 y z g)))
       (compose C (G.1 (F.1 x)) (G.1 (F.1 y)) (G.1 (F.1 z)) (G.2.1 (F.1 x) (F.1 y) (F.2.1 x y f))
       (G.2.1 (F.1 y) (F.1 z) (F.2.1 y z g))) (<i> G.2.1 (F.1 x) (F.1 z) (F.2.2.2 x y z f g @ i))
       (G.2.2.2 (F.1 x) (F.1 y) (F.1 z) (F.2.1 x y f) (F.2.1 y z g)))

def compFunctor' (A B C: precategory) (F: catfunctor B C) (G: catfunctor A B): catfunctor A C := compFunctor A B C G F

