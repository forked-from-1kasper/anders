{- The modality of shape infinitesimal in cohesive infinity topos.
   - \Im modality type.

   HoTT 7.7 Modalities
   Felix Cherubini PhD

   https://arxiv.org/pdf/1806.05966.pdf

   Copyright (c) Groupoid Infinity, 2014-2022. -}

module infinitesimal where
import library/path
import library/iso

-- [Cherubini] 2018 de Rham Stack

def Œπ (A : U) (a : A) : ‚Ñë A := ‚Ñë-unit a
def Œº (A : U) (a : ‚Ñë (‚Ñë A)) := ‚Ñë-join a

def is-coreduced (A : U) : U := isEquiv A (‚Ñë A) (Œπ A)
def ‚Ñë-coreduced (A : U) : is-coreduced (‚Ñë A) := isoToEquiv (‚Ñë A) (‚Ñë (‚Ñë A)) (Œπ (‚Ñë A)) (Œº A) (Œª (x : ‚Ñë (‚Ñë A)), <_> x) (Œª (y : ‚Ñë A), <_> y)
def ind-‚ÑëŒ≤ (A : U) (B : ‚Ñë A ‚Üí U) (f : Œ† (a : A), ‚Ñë (B (Œπ A a))) (a : A) : Path (‚Ñë (B (Œπ A a))) (ind-‚Ñë A B f (Œπ A a)) (f a) := <_> f a

-- this seems as natural way to obtain coreduceness of paths in ‚Äú‚Ñë A‚Äù
def ind-‚Ñë-const (A B : U) (b : ‚Ñë B) (x : ‚Ñë A) : Path (‚Ñë B) (ind-‚Ñë A (Œª (_ : ‚Ñë A), B) (Œª (_ : A), b) x) b := <_> b

def trans-‚Ñë (A : I ‚Üí U) (a : A 0) : ‚Ñë (A 1) := ‚Ñë-unit (transp (<i> A i) 0 a)
def trans-‚Ñë‚Ä≤ (A : I ‚Üí U) (a : A 0) : ‚Ñë (A 1) := transp (<i> ‚Ñë (A i)) 0 (‚Ñë-unit a)
def trans-‚Ñë-is-correct (A : I ‚Üí U) (a : A 0) : Path (‚Ñë (A 1)) (trans-‚Ñë A a) (trans-‚Ñë‚Ä≤ A a) := <_> trans-‚Ñë A a

def hcomp-‚Ñë (A : U) (r : I) (u : I ‚Üí Partial A r) (u‚ÇÄ : A[r ‚Ü¶ u 0]) : ‚Ñë A
 := ‚Ñë-unit (hcomp A r u (ouc u‚ÇÄ))

def hcomp-‚Ñë‚Ä≤ (A : U) (r : I) (u : I ‚Üí Partial A r) (u‚ÇÄ : A[r ‚Ü¶ u 0]) : ‚Ñë A
 := hcomp (‚Ñë A) r (Œª (i : I), [(r = 1) ‚Üí ‚Ñë-unit (u i 1=1)]) (‚Ñë-unit (ouc u‚ÇÄ))

def hcomp-‚Ñë-is-correct (A : U) (r : I) (u : I ‚Üí Partial A r) (u‚ÇÄ : A[r ‚Ü¶ u 0])
  : Path (‚Ñë A) (hcomp-‚Ñë A r u u‚ÇÄ) (hcomp-‚Ñë‚Ä≤ A r u u‚ÇÄ)
 := <_> hcomp-‚Ñë A r u u‚ÇÄ

def ‚Ñë-ind (A : U) (B : ‚Ñë A ‚Üí U) (c : Œ† (a : ‚Ñë A), is-coreduced (B a)) (f : Œ† (a : A), B (Œπ A a)) (a : ‚Ñë A) : B a
 := (c a (ind-‚Ñë A B (Œª (x : A), Œπ (B (Œπ A x)) (f x)) a)).1.1

def ‚Ñë-indŒ≤ (A : U) (B : ‚Ñë A ‚Üí U) (c : Œ† (a : ‚Ñë A), is-coreduced (B a)) (f : Œ† (a : A), B (Œπ A a)) (a : A)
  : Path (B (Œπ A a)) (f a) ((‚Ñë-ind A B c f) (Œπ A a))
 := <i> sec-equiv (B (Œπ A a)) (‚Ñë (B (Œπ A a))) (Œπ (B (Œπ A a)), c (Œπ A a)) (f a) @ -i

def ‚Ñë-rec (A B : U) (c : is-coreduced B) (f : A ‚Üí B) : ‚Ñë A ‚Üí B
 := ‚Ñë-ind A (Œª (_ : ‚Ñë A), B) (Œª (_ : ‚Ñë A), c) f

def ‚Ñë-recŒ≤ (A B : U) (c : is-coreduced B) (f : A ‚Üí B) (a : A) : PathP (<_> B) (f a) ((‚Ñë-rec A B c f) (Œπ A a))
 := ‚Ñë-indŒ≤ A (Œª (_ : ‚Ñë A), B) (Œª (_ : ‚Ñë A), c) f a

def ‚Ñë-rec‚Ä≤ (A B : U) (f : A ‚Üí ‚Ñë B) : ‚Ñë A ‚Üí ‚Ñë B := ind-‚Ñë A (Œª (x : ‚Ñë A), B) f
def ‚Ñë-rec‚Ä≤-Œ≤ (A B : U) (f : A ‚Üí ‚Ñë B) (x : A) : Path (‚Ñë B) (‚Ñë-rec‚Ä≤ A B f (‚Ñë-unit x)) (f x) := <_> f x

def ‚Ñë-Œ†-comm (A : U) (B : A ‚Üí U) (œÜ : ‚Ñë (Œ† (x : A), B x)) (y : A) : ‚Ñë (B y) :=
‚Ñë-rec‚Ä≤ (Œ† (x : A), B x) (B y) (Œª (f : Œ† (x : A), B x), ‚Ñë-unit (f y)) œÜ

def ‚Ñë-‚Üí-comm (A B : U) : ‚Ñë (A ‚Üí B) ‚Üí (A ‚Üí ‚Ñë B) := ‚Ñë-Œ†-comm A (Œª (_ : A), B)

def ind-‚Ñë‚ÇÇ (A : U) (B : ‚Ñë A ‚Üí ‚Ñë A ‚Üí U) (f : Œ† (a b : A), ‚Ñë (B (‚Ñë-unit a) (‚Ñë-unit b))) (x y : ‚Ñë A) : ‚Ñë (B x y) :=
‚Ñë-join (‚Ñë-Œ†-comm (‚Ñë A) (Œª (y : ‚Ñë A), ‚Ñë (B x y))
  (ind-‚Ñë A (Œª (x : ‚Ñë A), Œ† (y : ‚Ñë A), ‚Ñë (B x y))
    (Œª (a : A), ‚Ñë-unit (ind-‚Ñë A (B (‚Ñë-unit a)) (f a))) x) y)

def ‚Ñë-app (A B : U) (f : A ‚Üí B) : ‚Ñë A ‚Üí ‚Ñë B := ‚Ñë-rec A (‚Ñë B) (‚Ñë-coreduced B) (‚àò A B (‚Ñë B) (Œπ B) f)
def ‚Ñë-naturality (A B : U) (f : A ‚Üí B) (a : A) : Path (‚Ñë B) ((Œπ B) (f a)) ((‚Ñë-app A B f) (Œπ A a))
 := <_> ‚Ñë-unit (f a) -- slightly surprisingly, but it computes

-- more direct derivation of ‚Ñë-app
def ‚Ñë-lift (A B : U) (f : A ‚Üí B) : ‚Ñë A ‚Üí ‚Ñë B := ‚Ñë-rec‚Ä≤ A B (Œª (a : A), ‚Ñë-unit (f a))

def ‚Ñë-idfun (A : U) : ‚Ñë A ‚Üí ‚Ñë A := ‚Ñë-rec‚Ä≤ A A (Œπ A)

def ‚Ñë-Œ©-elim (A : U) (a b : ‚Ñë A) (œÅ : ‚Ñë (Path (‚Ñë A) a b)) : Path (‚Ñë A) a b :=
<i> ‚Ñë-rec‚Ä≤ (Path (‚Ñë A) a b) A (Œª (p : Path (‚Ñë A) a b), p @ i) œÅ

def ‚Ñë-path-coreduced (A : U) (a b : ‚Ñë A) : is-coreduced (Path (‚Ñë A) a b) :=
isoToEquiv (Path (‚Ñë A) a b) (‚Ñë (Path (‚Ñë A) a b)) (Œπ (Path (‚Ñë A) a b)) (‚Ñë-Œ©-elim A a b)
  (Œª (œÅ : ‚Ñë (Path (‚Ñë A) a b)),
    ‚Ñë-Œ©-elim (Path (‚Ñë A) a b) (‚Ñë-unit (‚Ñë-Œ©-elim A a b œÅ)) œÅ
      (ind-‚Ñë (Path (‚Ñë A) a b)
        (Œª (Œº : ‚Ñë (Path (‚Ñë A) a b)),
          Path (‚Ñë (Path (‚Ñë A) a b))
               (‚Ñë-unit (‚Ñë-Œ©-elim A a b Œº)) Œº)
        (Œª (p : Path (‚Ñë A) a b), ‚Ñë-unit (<_> ‚Ñë-unit p)) œÅ))
  (Œª (p : Path (‚Ñë A) a b), <_> p)

def ‚Ñë-app-comp (A B C : U) (f : B ‚Üí C) (g : A ‚Üí B) :
  Œ† (x : ‚Ñë A), Path (‚Ñë C) (‚Ñë-app A C (‚àò A B C f g) x) (‚Ñë-app B C f (‚Ñë-app A B g x)) :=
‚Ñë-ind A (Œª (x : ‚Ñë A), Path (‚Ñë C) (‚Ñë-app A C (‚àò A B C f g) x) (‚Ñë-app B C f (‚Ñë-app A B g x)))
  (Œª (x : ‚Ñë A), ‚Ñë-path-coreduced C (‚Ñë-app A C (‚àò A B C f g) x) (‚Ñë-app B C f (‚Ñë-app A B g x)))
  (Œª (a : A), <_> ‚Ñë-unit (f (g a)))

def ~ (X : U) (a x‚Ä≤ : X) : U := Path (‚Ñë X) (Œπ X a) (Œπ X x‚Ä≤)
def ùîª (X : U) (a : X) : U := Œ£ (x‚Ä≤ : X), ~ X a x‚Ä≤
def unitDisc (X : U) (x : ‚Ñë X) : U := Œ£ (x‚Ä≤ : X), Path (‚Ñë X) x (Œπ X x‚Ä≤)
def starDisc (X : U) (x : X) : ùîª X x := (x, idp (‚Ñë X) (Œπ X x))
def T‚àû (A : U) : U := Œ£ (a : A), ùîª A a

def inf-prox-ap (X Y : U) (f : X ‚Üí Y) (x x‚Ä≤ : X) (p : ~ X x x‚Ä≤) : ~ Y (f x) (f x‚Ä≤) := <i> ‚Ñë-app X Y f (p @ i)

def inf-prox-comp (X Y Z : U) (f : Y ‚Üí Z) (g : X ‚Üí Y) (x x‚Ä≤ : X) (p : ~ X x x‚Ä≤)
    : Path (~ Z (f (g x)) (f (g x‚Ä≤)))
           (inf-prox-ap X Z (‚àò X Y Z f g) x x‚Ä≤ p)
           (inf-prox-ap Y Z f (g x) (g x‚Ä≤) (inf-prox-ap X Y g x x‚Ä≤ p)) :=
<i j> ‚Ñë-app-comp X Y Z f g (p @ j) @ i

def d (X Y : U) (f : X ‚Üí Y) (x : X) (Œµ : ùîª X x) : ùîª Y (f x) := (f Œµ.1, inf-prox-ap X Y f x Œµ.1 Œµ.2)
def T‚àû-map (X Y : U) (f : X ‚Üí Y) (œÑ : T‚àû X) : T‚àû Y := (f œÑ.1, d X Y f œÑ.1 œÑ.2)

theorem diff-comp (A B C : U) (f : A ‚Üí B) (g : B ‚Üí C) (x : A)
  : Path ((ùîª A x ‚Üí ùîª C ((‚àò A B C g f) x))) (d A C (‚àò A B C g f) x)
         (‚àò (ùîª A x) (ùîª B (f x)) (ùîª C (g (f x))) (d B C g (f x)) (d A B f x))
 := <i> Œª (Œµ : ùîª A x), (g (f Œµ.1), inf-prox-comp A B C g f x Œµ.1 Œµ.2 @ i)

def is-homogeneous (A : U) :=
Œ£ (e : A) (t : A ‚Üí equiv A A), Œ† (x : A), Path A ((t x).1 e) x
