import library/data/coequalizer

def full (A : U) (R : A → A → U) := Σ (x y : A), R x y

def quot (A : U) (R : A → A → U) :=
coeq (λ (w : full A R), w.1) (λ (w : full A R), w.2.1)

def quot-elem (A : U) (R : A → A → U) (x : A) : quot A R :=
iota (λ (w : full A R), w.1) (λ (w : full A R), w.2.1) x

def quot-glue (A : U) (R : A → A → U) (x y : A) (ρ : R x y) :
  Path (quot A R) (quot-elem A R x) (quot-elem A R y) :=
<i> resp (λ (w : full A R), w.1) (λ (w : full A R), w.2.1) (x, y, ρ) i