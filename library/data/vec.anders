import library/data/nat

def Vec (A : U) : ℕ → U := ℕ-iterω L₁ U 𝟏 (λ (X : U), A × X)
def vzero (A : U) : Vec A zero := ★
def vsucc (A : U) (n : ℕ) (head : A) (tail : Vec A n) : Vec A (succ n) := (head, tail)

def Vec-ind (A : U) (T : Π (n : ℕ), Vec A n → U) (z : T zero (vzero A))
  (s : Π (n : ℕ) (x : A) (v : Vec A n), T n v → T (succ n) (vsucc A n x v)) (m : ℕ) : Π (x : Vec A m), T m x :=
ℕ-ind (λ (k : ℕ), Π (x : Vec A k), T k x) (ind₁ (T zero) z)
      (λ (k : ℕ) (f : Π (x : Vec A k), T k x) (y : Vec A (succ k)), s k y.1 y.2 (f y.2)) m

def Vec-rec (A B : U) (z : B) (s : Π (n : ℕ), A → Vec A n → B → B) (m : ℕ) : Vec A m → B :=
Vec-ind A (λ (n : ℕ) (_ : Vec A n), B) z s m

def Vec-map (A B : U) (f : A → B) (n : ℕ) : Vec A n → Vec B n :=
Vec-ind A (λ (k : ℕ) (_ : Vec A k), Vec B k) ★ (λ (k : ℕ) (x : A) (_ : Vec A k), vsucc B k (f x)) n
