{- Fiber Bundle: https://groupoid.space/math/bundle/
   - Fiber Bundle;
   - Trivial Fiber Bundle, Bundle=Pi;
   - Local F-Bundle (4 definitions).

   HoTT 2.3 Type families are fibrations

   Copyright (c) Groupoid Infinity, 2014-2022. -}

module bundle where
import library/sigma
import library/iso

def Family (B : U) : U₁ := B -> U
def Fibration (B : U) : U₁ := Σ (X : U), X -> B

def encode (B : U) (F : B -> U) (y : B) : fiber (Sigma B F) B (pr₁ B F) y -> F y := \(x : fiber (Sigma B F) B (pr₁ B F) y), subst B F x.1.1 y (<i> x.2 @ -i) x.1.2
def decode (B : U) (F : B -> U) (y : B) : F y -> fiber (Sigma B F) B (pr₁ B F) y := \(x : F y), ((y, x), idp B y)
def decode-encode (B : U) (F : B -> U) (y : B) (x : F y) : Path (F y) (transp (<i> F (idp B y @ i)) 0 x) x := <j> transp (<i> F y) j x
def encode-decode (B : U) (F : B -> U) (y : B) (x : fiber (Sigma B F) B (pr₁ B F) y) : Path (fiber (Sigma B F) B (pr₁ B F) y) ((y, encode B F y x), idp B y) x
 := <i> ((x.2 @ i, transp (<j> F (x.2 @ i ∨ -j)) i x.1.2), <j> x.2 @ i ∧ j)

def Bundle=Pi (B : U) (F : B -> U) (y : B) : PathP (<_> U) (fiber (Sigma B F) B (pr₁ B F) y) (F y)
 := isoPath (fiber (Sigma B F) B (pr₁ B F) y) (F y) (encode B F y) (decode B F y) (decode-encode B F y) (encode-decode B F y)
