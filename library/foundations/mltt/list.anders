{- Run-Time List Type:
   - List;

   HoTT 5.3 W-Types

   Copyright (c) Groupoid Infinity, 2014-2022. -}

module list where
import library/foundations/mltt/maybe
option girard true

def List-ctor (A: U) := maybe-rec A U 𝟎 (λ (a : A), 𝟏)
def List (A: U) := W (x : Maybe A), List-ctor A x
def nil (A: U) : List A := sup (Maybe A) (List-ctor A) (nothing A) (ind₀ (List A))
def cons (A: U) (x : A) (xs: List A) : List A := sup (Maybe A) (List-ctor A) (just A x) (λ (x : 𝟏), xs)

def nil-List (A: U) (C : List A → U) (f : 𝟎 → List A) : C (nil A) → C (sup (Maybe A) (List-ctor A) (0₂,★) f)
 := transp (<i> C (sup (Maybe A) (List-ctor A) (0₂,star) (λ (x : 𝟎), ind₀ (PathP (<_> List A) (ind₀ (List A) x) (f x)) x @ i))) 0

def cons-List (A: U) (C : List A → U) (f : 𝟏 → List A) (x: A) : C (cons A x (f ★)) → C (sup (Maybe A) (List-ctor A) (1₂,x) f)
 := transp (<i> C (sup (Maybe A) (List-ctor A) (1₂,x) (λ (x : 𝟏), ind₁ (λ (y : 𝟏), PathP (<_> List A) (f ★) (f y)) (<_> f ★) x @ i))) 0

def List-ind (A: U) (C: List A -> U) (z: C (nil A)) (s: Π (x: A) (xs: List A), C xs -> C (cons A x xs)) : Π (n: List A), C n
 := indᵂ (Maybe A) (List-ctor A) C
    (maybe-ind A
      (λ (x: Maybe A), Π (f : List-ctor A x → List A), (Π (b : List-ctor A x), C (f b)) → C (sup (Maybe A) (List-ctor A) x f))
      (λ (f : 𝟎 → List A) (g : Π (x : 𝟎), C (f x)), nil-List A C f z)
      (λ (x: A) (f : 𝟏 → List A) (g : Π (x : 𝟏), C (f x)), cons-List A C f x (s x (f ★) (g ★))))
  
